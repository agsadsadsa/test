name: Build and Sign Windows Executable

on:
  push:
    branches:
      - main  # 当代码推送到主分支时触发该工作流

jobs:
  build:
    runs-on: windows-latest  # 使用 GitHub 提供的最新 Windows 环境

    steps:
    # Step 1: Checkout repository
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 2: Set up Python (Use version 3.11 for example)
    - name: Set up Python 3.11
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'

    # Step 3: Install OpenSSL
    - name: Install OpenSSL
      run: |
        choco install openssl

    # Step 4: Set up the build environment (Install dependencies, etc.)
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt  # 假设你的依赖项在 requirements.txt 中

    # Step 5: Generate self-signed certificate using OpenSSL
    - name: Generate self-signed certificate
      run: |
        openssl genpkey -algorithm RSA -out private_key.pem -aes256
        openssl req -new -key private_key.pem -out csr.pem
        openssl req -x509 -key private_key.pem -in csr.pem -out cert.crt -days 365
        openssl pkcs12 -export -out certificate.pfx -inkey private_key.pem -in cert.crt
      env:
        OPENSSL_CONF: C:\Program Files\OpenSSL-Win64\bin\openssl.cfg

    # Step 6: Build the project (Replace this with your actual build command)
    - name: Build the application
      run: |
        pyinstaller --onefile your_script.py  # 生成的 EXE 文件

    # Step 7: Sign the executable using signtool
    - name: Sign the executable
      run: |
        signtool sign /f certificate.pfx /p ${{ secrets.CODE_SIGNING_PASSWORD }} dist/your_script.exe

    # Step 8: Upload the signed executable as an artifact
    - name: Upload signed executable as artifact
      uses: actions/upload-artifact@v2
      with:
        name: signed-executable
        path: dist/your_script.exe
